generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  username        String?   @unique
  email           String    @unique
  password        String
  full_name       String
  bio             String?
  profile_picture String?
  birth_day       Int?
  birth_month     Int?
  birth_year      Int?
  created_at      DateTime  @default(now())

  // Existing Instagram relations
  posts          Post[]
  comments       Comment[]
  likes          Like[]
  followers      Follow[] @relation("follower")
  following      Follow[] @relation("following")

  // New chat relations
  conversations  Participant[]
  sentMessages   Message[]     @relation("sentMessages")
  readReceipts   ReadReceipt[]
}

model Post {
  id         Int       @id @default(autoincrement())
  image_url  String
  caption    String?
  created_at DateTime  @default(now())
  user_id    Int
  user       User      @relation(fields: [user_id], references: [id])
  comments   Comment[]
  likes      Like[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  user_id    Int
  post_id    Int
  created_at DateTime @default(now())
  post       Post     @relation(fields: [post_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])
}

model Like {
  id         Int      @id @default(autoincrement())
  user_id    Int
  post_id    Int
  created_at DateTime @default(now())
  post       Post     @relation(fields: [post_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@unique([user_id, post_id])
}

model Follow {
  id           Int      @id @default(autoincrement())
  follower_id  Int
  following_id Int
  created_at   DateTime @default(now())
  
  follower     User     @relation("follower", fields: [follower_id], references: [id])
  following    User     @relation("following", fields: [following_id], references: [id])

  @@unique([follower_id, following_id])
}

model Conversation {
  id           Int            @id @default(autoincrement())
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  participants Participant[]
  messages     Message[]

  @@index([updated_at])
}

model Participant {
  id              Int           @id @default(autoincrement())
  user_id         Int
  conversation_id Int
  user            User          @relation(fields: [user_id], references: [id])
  conversation    Conversation  @relation(fields: [conversation_id], references: [id])
  has_unread      Boolean       @default(false)
  last_read_at    DateTime?

  @@unique([user_id, conversation_id])
}

model Message {
  id              Int           @id @default(autoincrement())
  content         String
  sender_id       Int
  conversation_id Int
  sender          User          @relation(fields: [sender_id], references: [id], name: "sentMessages")
  conversation    Conversation  @relation(fields: [conversation_id], references: [id])
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  read_by         ReadReceipt[]

  @@index([conversation_id, created_at])
}

model ReadReceipt {
  id         Int      @id @default(autoincrement())
  message_id Int
  user_id    Int
  message    Message  @relation(fields: [message_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])
  read_at    DateTime @default(now())

  @@unique([message_id, user_id])
}